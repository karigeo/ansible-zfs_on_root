---
# ###[ Wipe Partitions of Selected Device ]######################################

- name: Wipe Partitions of Selected Devices Block
  when:
    ansible_nodename != "localhost"
  tags:
    - clear_partition_tables_from_devices
  block:
    - name: Ensure Swap Partitions are Not Used
      ansible.builtin.command:
        cmd: "swapoff --all"
      register: cmd_output
      changed_when: cmd_output.rc == 0

    - name: Force / lazy unmount /mnt
      ansible.builtin.command:
        cmd: "umount --lazy /mnt"
      register: cmd_output
      changed_when:
        cmd_output.rc == 0
      ignore_errors: true

    - name: Destroy ZFS pool from previous usage
      ansible.builtin.command:
        cmd: "zpool destroy -f {{ root_pool_name }}"
      register: cmd_output
      changed_when:
        cmd_output.rc == 0
      ignore_errors: true

    - name: Remove ZFS labels from previous usage
      ansible.builtin.command:
        cmd: "zpool labelclear -f {{ item }}-part3"
        removes: "{{ item }}-part3"
      register: cmd_output
      changed_when:
        cmd_output.rc == 0
      ignore_errors: true
      loop:
        "{{ disk_by_id }}"

    - name: Check exisiting LUKS containers on specified disks
      ansible.builtin.shell: |
        lsblk -l -o NAME,FSTYPE,UUID | awk -F ' ' ' /{{ disk_devices | join('|') }}/ { if ( (NF == 3) && ($2 == "crypto_LUKS") ) {print $3} }'
      register: cmd_output
      changed_when:
        cmd_output.rc == 0
      ignore_errors: true
    
    - name: Get list of open LUKS containers
      ansible.builtin.set_fact:
        current_luks_containers: "{{ cmd_output.stdout | split('\n') }}"

    - name: Debug list of open LUKS containers
      ansible.builtin.debug:
        msg: "{{ current_luks_containers }}"
      when:
        - debug | default(false)
    
    - name: Close (and remove) open LUKS containers
      community.crypto.luks_device:
        uuid: "{{ item }}"
        state: "absent"
      loop: "{{ current_luks_containers }}"

    - name: Unmount any mdadm disks that might have been automounted and Stop all found mdadm arrays
      ansible.builtin.shell: |
        find /dev -iname md* -type b -exec bash -c \
        "umount {} > /dev/null 2>&1 ; mdadm --stop --force {} > /dev/null 2>&1 ; mdadm --remove {} > /dev/null 2>&1" \;
      register: cmd_output
      changed_when:
        cmd_output.rc == 0
      ignore_errors: true

    - name: Wipe mdadm superblock from partitions
      ansible.builtin.command:
        cmd: "mdadm --zero-superblock --force {{ item }}"
        removes: "{{ item }}"
      register: cmd_output
      changed_when:
        cmd_output.rc == 0
      ignore_errors: true
      loop:
        "{{ disk_by_id | list | product([boot_partition, swap_partition, lvm_partition]) | map('join','-part') }}"

    - name: Get partition infos for all disks
      command: "lsblk -o NAME,PARTTYPE,TYPE,PATH -J {{ item }}"
      loop: "{{ disk_by_id }}"
      register: partinfos

    - name: Filter for EFI-Partitions
      set_fact:
        efi_partitions: >-
          {{
            (efi_partitions | default([])) +
            (
              (item.stdout | from_json).blockdevices | map(attribute='children') | select('defined')
              | map('selectattr', 'parttype', 'equalto', 'c12a7328-f81f-11d2-ba4b-00a0c93ec93b')
              | map('map', attribute='path') | sum(start=[])
            )
          }}
      loop: "{{ partinfos.results }}"
      when: item.stdout is defined

    - name: Shred all EFI partitions to ensure no leftovers are present
      ansible.builtin.command:
        cmd: "shred --iterations=1 --zero {{ item }}"
      register: cmd_output
      changed_when: cmd_output.rc == 0
      loop:
        "{{ efi_partitions }}"

    - name: Wipe filesystem information
      ansible.builtin.command:
        cmd: "wipefs --all --force {{ item }}"
      register: cmd_output
      changed_when: cmd_output.rc == 0
      loop:
        "{{ disk_by_id }}"

    - name: Zap all partition table information
      ansible.builtin.command:
        cmd: "sgdisk --zap-all {{ item }}"
      register: cmd_output
      changed_when: cmd_output.rc == 0
      loop:
        "{{ disk_by_id }}"

    - name: Clear out all partition data; GPT header; protective MBR, etc
      ansible.builtin.command:
        cmd: "sgdisk --clear {{ item }}"
      register: cmd_output
      changed_when: cmd_output.rc == 0
      loop:
        "{{ disk_by_id }}"

    - name: Wait for kernel notification of changes to be processed
      ansible.builtin.command:
        cmd: "udevadm settle"
      register: cmd_output
      changed_when: cmd_output.rc == 0

    - name: Pause for 5 seconds to settle
      ansible.builtin.pause:
        seconds: 5
