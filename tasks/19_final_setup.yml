---
###############################################################################
# [ Upgrade base system ]##################################################
- name: Upgrade Base System Block
  when:
    - ansible_nodename != "localhost"
  tags:
    - final_setup
  block:
    - name: Update and Dist-Upgrade the system
      ansible.builtin.apt:
        upgrade: dist
        force_apt_get: true
        autoclean: true
        autoremove: true
        update_cache: true
        install_recommends: true

    - name: Install basic software set (should equate to 'tasksel standard')
      ansible.builtin.apt:
        autoclean: true
        autoremove: true
        install_recommends: true
        name:
          - task-ssh-server
          - task-german
          - pciutils
          - bash-completion
          - netcat-traditional
          - doc-debian
          - wget
          - wamerican
          - python3-reportbug
          - systemd-timesyncd
          - reportbug
          - liblockfile-bin
          - bind9-dnsutils
          - libnss-systemd
          - debian-faq
          - media-types
          - mailcap
          - groff-base
          - lsof
          - bind9-host
          - man-db
          - krb5-locales
          - traceroute
          - inetutils-telnet
          - apt-listchanges
          - gpg
          - gpg-agent

###############################################################################
# [ Disable IPv6 Networking ]##################################################
- name: Disable IPv6 Networking Block
  when:
    - ipv6.disable | default(false) | bool
    - ansible_nodename != "localhost"
  tags:
    - final_setup
    - disable_ipv6
  block:
    - name: Disable IPv6 Networking
      ansible.builtin.lineinfile:
        path: "{{ ipv6.conf_file }}"
        line: "{{ item }}"
        state: present
      loop: "{{ ipv6.disable_settings }}"
      loop_control:
        label: "{{ item }}"

    - name: Apply Updated IPv6 Setting
      ansible.builtin.command:
        cmd: "{{ ipv6.apply_cmd }}"
      register: cmd_output
      changed_when: cmd_output.rc == 0

# ###############################################################################
# # [ Enable ZFS Email Notifications ]##########################################
# - name: Enable ZFS Email Notifications Block
#   when:
#     - msmtp.enabled | default(false) | bool
#   tags:
#     - final_setup
#     - install_msmtp
#   block:
#     # Enable ZFS Email Notifications
#     - name: Modify syslinux-update.sh
#       ansible.builtin.replace:
#         path: "/etc/zfs/zed.d/zed.rc"
#         regexp: '{{ find_values.regexp }}'
#         replace: '{{ find_values.replace }}'
#       loop:
#         - { regexp: '^ZED_EMAIL_ADDR.*', replace: 'ZED_EMAIL_ADDR="{{ msmtp.msmtp_alias_default }}"' }
#         - { regexp: '(^#)?ZED_EMAIL_OPTS.*', replace: 'ZED_EMAIL_OPTS="-s ''@SUBJECT@'' @ADDRESS@ -r {{ secret_msmtp_send_from_email }}"' }
#       loop_control:
#         loop_var: find_values

###############################################################################
# [ Apply SSHD Settings ]######################################################
- name: Update SSHD Settings Block
  tags:
    - final_setup
    - update_sshd_settings
  block:
    - name: Update SSHD Settings
      ansible.builtin.replace:
        path: /etc/ssh/sshd_config
        regexp: "^(#? ?)?{{ item.key }} +(yes|no|none|any|prohibit-password|[0-9]+|[0-9]+m)"
        replace: "{{ item.key }} {{ item.value }}"
        validate: "/usr/sbin/sshd -t -f %s"
      loop: "{{ apply_sshd_settings | dict2items }}"
      register: update_sshd

    - name: Restart SSHD Server
      ansible.builtin.service:
        name: sshd
        state: restarted
      when: update_sshd.changed

###############################################################################
# [ Final Setup ]##############################################################
- name: Final Setup Block
  when:
    - ansible_nodename != "localhost"
  tags:
    - final_setup
  block:

    - name: Install any remaining packages defined
      ansible.builtin.apt:
        pkg: "{{ additional_install_packages }}"
        state: present
        install_recommends: false
      when:
        - ansible_os_family == "Debian"

    # Set apt/dpkg to automagically snap the system datasets on install/remove
    - name: Copy apt 30pre-snap to /etc/apt/apt.conf.d/30pre-snap
      ansible.builtin.template:
        src: apt_30pre-snap.j2
        dest: /etc/apt/apt.conf.d/30pre-snap
        owner: root
        group: root
        mode: '0644'

    # - name: Update timezone setting
    #   ansible.builtin.command:
    #     cmd: "timedatectl set-timezone {{ timezone_value }}"
    #   register: cmd_output
    #   changed_when: cmd_output.rc == 0

    - name: Expire the root password
      ansible.builtin.command:
        cmd: "passwd --expire {{ item }}"
      register: cmd_output
      changed_when: cmd_output.rc == 0
      loop:
        - 'root'
    
    - name: Disable ansible user password
      ansible.builtin.user:
        name: ansible
        password: '*'

    # [ Switch Log Compression to ZFS Compression ]############################
    - name: Locate Existing Log Files
      ansible.builtin.find:
        paths: /etc/logrotate.d
        patterns: "*"
      register: files_matched

    - name: Disable the log compression in each file so ZFS does the Log Compression
      ansible.builtin.replace:
        path: "{{ item.path }}"
        regexp: (^|[^#y])(compress)
        replace: '\1#\2'
      with_items: "{{ files_matched.files }}"
      loop_control:
        label: "{{ item.path }}"

    # [ Create System Snapshot Before Reboot ]#################################
    # If a base_install snapshot does not exist, create one
    - name: Create base_install snapshot
      ansible.builtin.shell:
        cmd:
          zfs get type {{ root_pool_dataset_path }}@base_install || zfs snapshot {{ root_pool_dataset_path }}@base_install
      args:
        executable: /bin/bash
      register: cmd_output
      changed_when: cmd_output.rc == 0

###############################################################################
