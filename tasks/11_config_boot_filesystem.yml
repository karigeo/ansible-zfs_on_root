---
# [ Setup Boot Partition as mdadm mirror for multi-disk setups ]###############
- name: Create Boot Partition Mirror Block
  when:
    - ansible_nodename != "localhost"
    - disk_by_id | length | int > 1
  tags:
    - config_boot_fs
  block:
    # Create name of boot device
    - name: Create name of boot device
      ansible.builtin.set_fact:
        boot_dev_name: "/dev/md/BOOT_EFI"

    # Create a list of device partitions to use
    - name: Create a list of device partitions to use
      ansible.builtin.set_fact:
        mdadm_device_list: "{{ mdadm_device_list | default('') }} {{ item }}-part{{ boot_partition }}"
      loop:
        "{{ disk_by_id }}"

    - name: Unmount any mdadm disks that might have been automounted and Stop all found mdadm arrays
      ansible.builtin.shell: >
        find /dev -iname md* -type b -exec bash -c
        "umount {} > /dev/null 2>&1 ; mdadm --stop --force {} > /dev/null 2>&1 ; mdadm --remove {} > /dev/null 2>&1" \;
      register: cmd_output
      changed_when:
        cmd_output.rc == 0
      ignore_errors: true

    - name: Wipe mdadm superblock from partitions
      ansible.builtin.command:
        cmd: "mdadm --zero-superblock --force {{ item }}-part{{ boot_partition }}"
      register: cmd_output
      changed_when:
        cmd_output.rc == 0
      ignore_errors: true
      loop:
        "{{ disk_by_id }}"

    # The "-R" - is needed to suppress the "Continue creating array?" prompt
    - name: Run chroot command to create mdadm device for multi-disk boot partition
      ansible.builtin.command:
        cmd: >
          mdadm --create {{ boot_dev_name }} --verbose -R --metadata=0.9 --force --level=mirror
          --raid-devices={{ disk_by_id | length | int }} --homehost={{ inventory_hostname_short }}
          --name=efi  --assume-clean {{ mdadm_device_list }}
        creates: "{{ boot_dev_name }}"
      register: cmd_output
      changed_when: cmd_output.rc == 0

    - name: Run chroot command to create mdadm.conf file multi-disk boot partition
      ansible.builtin.command:
        cmd:
          mdadm --examine --scan >> {{ live_cd_mountpoint }}/etc/mdadm/mdadm.conf
        creates: "{{ boot_dev_name }}"
      register: cmd_output
      changed_when: cmd_output.rc == 0

###############################################################################
# [ Create Boot Partition for single disk setups ]#############################
- name: Create Boot Filesystem Block
  when:
    - ansible_nodename != "localhost"
    - disk_by_id | length | int == 1
  tags:
    - config_boot_fs
  block:
    # Create name of boot device
    - name: Create name of boot device
      ansible.builtin.set_fact:
        boot_dev_name: "{{ disk_by_id[0] }}-part{{ boot_partition }}"

###############################################################################
# [ Create Boot EFI Directory ]################################################
- name: Create Boot Filesystem Block
  when:
    - ansible_nodename != "localhost"
  tags:
    - config_boot_fs
  block:

    - name: Create EFI filesystem on boot device
      community.general.filesystem:
        dev: "{{ boot_dev_name }}"
        fstype: "vfat"
        opts: "-F 32 -s 1 -n BOOT_EFI"
        state: present

    - name: Create /boot/efi directory
      ansible.builtin.file:
        path: "{{ efi_boot_mountpoint }}"
        state: directory
        mode: '0755'

###############################################################################
# [ Build up fstab file ]######################################################
- name: Build fstab File Block
  when:
    - ansible_nodename != "localhost"
  tags:
    - config_boot_fs
  block:
    # Debug Remove any existing /boot/efi references within chroot environment
    # Entries would only exist if this task had been run previously
    - name: Remove any existing /boot/efi references from fstab
      ansible.builtin.replace:
        path: "/etc/fstab"
        regexp: '(?m)^/dev/disk/by-uuid/.*/boot/efi.*\n?'
        replace: ''

    - name: Remove UNCONFIGURED message in /etc/fstab
      ansible.builtin.blockinfile:
        path: "/etc/fstab"
        marker: "# UNCONFIGURED FSTAB FOR BASE SYSTEM"
        block: ""

    - name: Get Boot Device UUID
      ansible.builtin.command:
        cmd: "blkid -s UUID -o value \"{{ boot_dev_name }}\""
      register: boot_dev_uuid
      changed_when: boot_dev_uuid.rc == 0
      failed_when: boot_dev_uuid.stdout == ''

    - name: Mount /boot/efi and configure fstab
      ansible.posix.mount:
        boot: true
        dump: 0
        fstype: vfat
        opts: nofail,x-systemd.device-timeout=1,x-systemd.after=zfs-mount.service
        passno: 1
        path: /boot/efi
        src: "/dev/disk/by-uuid/{{ boot_dev_uuid.stdout }}"
        # src: "{{ (disk_by_id | length | int > 1) | ternary(boot_dev_name, boot_dev_path_single.stdout) }}"
        state: mounted

    # - name: Add EFI Filesystems to /etc/fstab
    #   ansible.builtin.shell:
    #     cmd: >
    #       echo /dev/disk/by-uuid/$(blkid -s UUID -o value "{{ boot_dev_name }}")
    #       /boot/efi vfat nofail,x-systemd.device-timeout=1,x-systemd.after=zfs-mount.service 0 1 >>"/etc/fstab"
    #   register: cmd_output
    #   changed_when: cmd_output.rc == 0

    - name: Debug get contents of chroot /etc/fstab
      ansible.builtin.command:
        cmd: "cat /etc/fstab"
      register: cmd_output
      changed_when: cmd_output.rc == 0
      when:
        debug | default(false)

    - name: Debug show contents of chroot /etc/fstab
      ansible.builtin.debug:
        var: cmd_output['stdout']
      when:
        debug | default(false)

    # Mount /boot/efi directory in chroot environment
    # - name: Mount /boot/efi directory
    #   ansible.posix.mount:
    #     path: "{{ efi_boot_mountpoint }}"
    #     state: "remounted"
    # - name: Run command to mount /boot/efi directory
    #   ansible.builtin.command:
    #     cmd: "mount {{ efi_boot_mountpoint }}"
    #   register: cmd_output
    #   changed_when: cmd_output.rc == 0

###############################################################################
